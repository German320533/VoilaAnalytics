import ipywidgets as widgets
from IPython.display import display, clear_output
import openai
import psycopg2
import pandas as pd
import matplotlib.pyplot as plt
from dotenv import load_dotenv
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª—é—á–∏
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# UI
question_input = widgets.Textarea(
    value='',
    placeholder='–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –ø—Ä–æ–¥–∞–∂–∏ —à–æ–∫–æ–ª–∞–¥–∞ –ø–æ –º–µ—Å—è—Ü–∞–º –∑–∞ 2023 –≥–æ–¥',
    description='–í–æ–ø—Ä–æ—Å:',
    layout=widgets.Layout(width='100%', height='100px'),
)
submit_button = widgets.Button(description='–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å', button_style='primary')
output = widgets.Output()

display(question_input, submit_button, output)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞ —Å GPT
def question_to_sql(question: str) -> str:
    prompt = (
        "–¢—ã –∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–µ–æ–±—Ä–∞–∑—É–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è PostgreSQL 17.\n"
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü:\n"
        "- Products(product_id, product_name)\n"
        "- Product_materials(product_id, component_id)\n"
        "- Customers(customer_id, customer_name, product_id, purchase_date, price, quantity)\n"
        "- Components(component_id, product_id, component_name, material_id)\n"
        "- Materials(material_id, material_name)\n\n"
        f"–í–æ–ø—Ä–æ—Å: {question}\nSQL:"
    )
    response = openai.ChatCompletion.create(
        model="openai/gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0,
    )
    return response['choices'][0]['message']['content'].strip()

# –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –Ω–∞ PostgreSQL
def execute_sql(query: str) -> pd.DataFrame:
    conn = psycopg2.connect(
        host=os.getenv("PG_HOST"),
        port=os.getenv("PG_PORT"),
        database=os.getenv("PG_DBNAME"),
        user=os.getenv("PG_USER"),
        password=os.getenv("PG_PASSWORD")
    )
    df = pd.read_sql_query(query, conn)
    conn.close()
    return df

# –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è: —Ç–∞–±–ª–∏—Ü–∞ + –≥—Ä–∞—Ñ–∏–∫
def visualize(df: pd.DataFrame):
    display(df)

    time_cols = [col for col in df.columns if col.lower() in ['purchase_date', 'month', 'date']]
    value_cols = [col for col in df.columns if pd.api.types.is_numeric_dtype(df[col])]

    if time_cols and value_cols:
        time_col = time_cols[0]
        value_col = value_cols[0]

        df[time_col] = pd.to_datetime(df[time_col])
        df.sort_values(by=time_col, inplace=True)
        df.set_index(time_col, inplace=True)

        df[value_col].plot(kind='line', marker='o', title=f"{value_col} –ø–æ –¥–∞—Ç–µ")
        plt.grid(True)
        plt.ylabel(value_col)
        plt.show()

# –ö–Ω–æ–ø–∫–∞
def on_submit_clicked(b):
    with output:
        clear_output()
        question = question_input.value.strip()
        if not question:
            print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å.")
            return

        print("üß† –í–æ–ø—Ä–æ—Å:", question)
        sql = question_to_sql(question)
        print("\nüìÑ SQL:")
        print(sql)

        try:
            df = execute_sql(sql)
            print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
            visualize(df)
        except Exception as e:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞:", e)

submit_button.on_click(on_submit_clicked)
